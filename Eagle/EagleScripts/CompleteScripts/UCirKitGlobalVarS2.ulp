//*************************************************************************
//****************   Breadboard-like general information    ***************
//*************************************************************************
int numOfRows = 30;
int numOfCols = 10;



//*************************************************************************
//**********************  Schematic information  **************************
//*************************************************************************
real xCursor = 0;
real yCursor = 0;

int largeFemaleHeaderPartNum = 1;
string largeFemaleHeaderPartStr = "M01PTH_WITHOUT_TEXT";
real xSpacingForLargeFemaleHeader = 1.0;
real ySpacingForLargeFemaleHeader = 0.48;

int largePadPartNum = 1;
// string largePadPartStr = "M01PTH_SMD_2.18X1.0668MM_NO_SILK";
string largePadPartStr = "M01PTH_SMD_3.25X0.85MM_NO_SILK";
real xSpacingForLargePadPart = 1.0;
real ySpacingForLargePadPart = 0.48;

int numOfLargeFemaleContacts = numOfRows * numOfCols;

int smallFemaleHeaderPartNum = 1;
// string smallFemaleHeaderPartStr = "M01PTH_SMD_1.27X0.635MM_NO_SILK";
string smallFemaleHeaderPartStr = "M01PTH_SMD_3.25X0.85MM_NO_SILK";
real xSpacingForSmallFemaleHeader = 1.0;
real ySpacingForSmallFemaleHeader = 0.48;



//*************************************************************************
//***************************   Board information   ***********************
//*************************************************************************

// real largeFemaleStartX = 21;  //mm
// real largeFemaleStartY = 88;  //mm

// real smallFemaleStartX = 90;   //mm
// real smallFemaleStartY = 91;   //mm

// real innerContactStartX = 124;   //mm
// real innerContactStartY = 96;    //mm

real xSpacingBetweenLargeFemaleHeaders = 2.54; //mm
real ySpacingBetweenLargeFemaleHeaders = 2.54; //mm

real xSpacingBetweenInnerContacts = 4.45;  //mm
real ySpacingBetweenInnerContacts = 2.45; //mm

real xSpacingBetweenOuterContactsForLeftAndRightZones = 4.5; //mm
real ySpacingBetweenOuterContactsForLeftAndRightZones = 1.27; //mm

real xSpacingBetweenOuterContactsForUpAndDownZones = ySpacingBetweenOuterContactsForLeftAndRightZones;
real ySpacingBetweenOuterContactsForUpAndDownZones = 4.191; //mm

real marginToVerticalBorder = 3;    //mm
real marginToTopHorizontalBorder = 3;      //mm
real marginToBottomHorizontalBorder = 3;   //mm

real holeDiameter = 4;  //mm
real holeToTopHorizontalBorder = 9.5;   //mm
real holeToBottomHorizontalBorder = 9.5;   //mm
real holeToVerticalBorder = 13.5;  //mm

real boardWidth;
real boardHeight;

project.board(B){
   boardWidth = u2mm(B.area.x2);
   boardHeight = u2mm(B.area.y2);
}

real largeFemaleStartX = boardWidth/2 - xSpacingBetweenLargeFemaleHeaders * (real(numOfCols)/2 + 1);
real largeFemaleStartY = boardHeight/2 + ySpacingBetweenLargeFemaleHeaders * (real(numOfRows)/2 - 1 + 0.5);
int largeFemaleJpStartNum = 1;
int largeFemaleJpEndNum = numOfRows * numOfCols;

real leftOuterPadsStartX = marginToVerticalBorder;
real leftOuterPadsStartY = boardHeight/2 + ySpacingBetweenOuterContactsForLeftAndRightZones * real(numOfRows-0.5);
int leftOuterPadsJpStartNum = numOfRows * numOfCols * 3 + 1;
int leftOuterPadsJpEndNum = leftOuterPadsJpStartNum - 1 + numOfRows * 2 * 2;

real rightOuterPadsStartX = boardWidth - marginToVerticalBorder - xSpacingBetweenOuterContactsForLeftAndRightZones;
real rightOuterPadsStartY = leftOuterPadsStartY;
int rightOuterPadsJpStartNum = leftOuterPadsJpEndNum + 1;
int rightOuterPadsJpEndNum = rightOuterPadsJpStartNum - 1 + numOfRows * 2 * 2;

real upperLeftOuterPadsStartX = boardWidth/2 - xSpacingBetweenOuterContactsForUpAndDownZones * (15 - 0.5);
real upperLeftOuterPadsStartY = boardHeight - marginToTopHorizontalBorder;
int upperLeftOuterPadsJpStartNum = rightOuterPadsJpEndNum + 1;
int upperLeftOuterPadsJpEndNum = upperLeftOuterPadsJpStartNum - 1 + 30;

// real upperRightOuterPadsStartX = boardWidth/2 + xSpacingBetweenLargeFemaleHeaders * 2 - xSpacingBetweenOuterContactsForUpAndDownZones/2;
// real upperRightOuterPadsStartY = upperLeftOuterPadsStartY;
// int upperRightOuterPadsJpStartNum = upperLeftOuterPadsJpEndNum + 1;
// int upperRightOuterPadsJpEndNum = upperRightOuterPadsJpStartNum - 1 + numOfCols/2 * 2 * 2;

real lowerLeftOuterPadsStartX = boardWidth/2 - xSpacingBetweenOuterContactsForUpAndDownZones * (15 - 0.5);
real lowerLeftOuterPadsStartY = marginToBottomHorizontalBorder;
int lowerLeftOuterPadsJpStartNum = upperLeftOuterPadsJpEndNum + 1;
int lowerLeftOuterPadsJpEndNum = lowerLeftOuterPadsJpStartNum - 1 + 30;

// real lowerRightOuterPadsStartX = boardWidth/2 + xSpacingBetweenLargeFemaleHeaders * 2 - xSpacingBetweenOuterContactsForUpAndDownZones/2;
// real lowerRightOuterPadsStartY = marginToBottomHorizontalBorder;
// int lowerRightOuterPadsJpStartNum = lowerLeftOuterPadsJpEndNum + 1;
// int lowerRightOuterPadsJpEndNum = lowerRightOuterPadsJpStartNum - 1 + numOfCols/2 * 2;

real innerPadsStartX = boardWidth/2 - xSpacingBetweenInnerContacts * (real(numOfCols)/2 - 0.5);
// real innerPadsStartY = boardHeight/2 + ySpacingBetweenInnerContacts * (real(numOfRows)/2 - 1 + 0.5);
real innerPadsStartY = (boardHeight - holeToTopHorizontalBorder + holeToBottomHorizontalBorder)/2 + ySpacingBetweenInnerContacts * (real(numOfRows)/2 - 1 + 0.5);
int innerPadsJpStartNum = numOfRows * numOfCols + 1;
int innerPadsJpEndNum = numOfRows * numOfCols * 2;

int mirror = 1;
int breadboard = 1;
int colIncrement = 1;
int rotateToVertical = 1;

//*************************************************************************
//**************************  Print ***************************************
//*************************************************************************

string Fritzing_Text = " /Applications/EAGLE-7.3.0/ulp/test.txt";
real FritzingStartX = 1;
real FritzingStartY = 1;
int Pair_num = 0;
char c1, c2;
int x1, x2, y1, y2;
real PairX[];
real PairY[];
int Pair[];
real LeftTopStartX = 14.975;
real LeftTopStartY = 85.525;
real XSpacing = 4.45;
real YSpacing = 2.45;
//int map[] = {1, 302, 303, 304, 313, 305, 306, 307, 308, 317, 310, 301, 325, 314, 315, 324, 327, 328, 318, 316, 309, 311, 322, 333, 335, 323, 336, 338, 326, 329, 320, 312, 332, 334, 343, 344, 337, 347, 348, 339, 319, 321, 342, 345, 353, 354, 357, 358, 346, 349, 330, 331, 352, 364, 355, 365, 367, 368, 356, 359, 340, 341, 362, 405, 373, 393, 398, 388, 378, 369, 350, 351, 372, 363, 374, 403, 397, 387, 377, 379, 360, 361, 382, 383, 375, 423, 428, 408, 366, 389, 370, 371, 392, 384, 385, 415, 448, 418, 376, 399, 380, 381, 402, 394, 404, 425, 426, 396, 386, 409, 390, 391, 412, 413, 395, 435, 436, 438, 407, 419, 400, 401, 422, 414, 424, 445, 446, 406, 417, 429, 410, 411, 432, 433, 434, 455, 456, 458, 427, 439, 420, 421, 442, 443, 444, 465, 466, 416, 437, 449, 430, 431, 452, 453, 454, 475, 476, 457, 447, 459, 440, 441, 462, 463, 464, 485, 486, 467, 468, 469, 450, 451, 472, 473, 474, 495, 496, 477, 478, 479, 460, 461, 482, 483, 484, 505, 506, 487, 488, 489, 470, 471, 492, 493, 494, 515, 516, 497, 498, 499, 480, 481, 502, 503, 504, 555, 566, 507, 508, 509, 490, 491, 512, 513, 514, 563, 547, 517, 518, 519, 500, 501, 522, 523, 524, 525, 526, 527, 528, 529, 510, 511, 532, 533, 534, 564, 567, 537, 538, 539, 520, 521, 542, 543, 544, 535, 536, 558, 548, 549, 530, 531, 552, 553, 554, 545, 546, 557, 576, 559, 540, 541, 562, 565, 575, 573, 556, 568, 577, 569, 550, 551, 572, 584, 585, 574, 578, 586, 588, 579, 560, 561, 581, 592, 594, 595, 587, 598, 599, 590, 570, 571, 582, 591, 593, 583, 596, 597, 600, 589, 580};
string lines[];
int lines_count = 0;
lines[lines_count++]="WirePair<[['A', '1'], ['D', '2']]";
lines[lines_count++]="WirePair<[['D', '1'], ['J', '10']]";
lines[lines_count++]="WirePair<[['J', '1'], ['F', '27']]";
lines[lines_count++]="WirePair<[['J', '1'], ['A', '14']]";
lines[lines_count++]="WirePair<[['J', '1'], ['A', '20']]";
lines[lines_count++]="WirePair<[['F', '1'], ['G', '17']]";
lines[lines_count++]="WirePair<[['F', '2'], ['G', '16']]";
lines[lines_count++]="WirePair<[['F', '3'], ['G', '20']]";
lines[lines_count++]="WirePair<[['F', '4'], ['G', '15']]";
lines[lines_count++]="WirePair<[['F', '5'], ['G', '19']]";
lines[lines_count++]="WirePair<[['F', '6'], ['J', '7']]";
lines[lines_count++]="WirePair<[['D', '3'], ['G', '18']]";
lines[lines_count++]="WirePair<[['D', '4'], ['J', '9']]";
lines[lines_count++]="WirePair<[['D', '5'], ['J', '8']]";
lines[lines_count++]="WirePair<[['A', '5'], ['A', '15']]";
lines[lines_count++]="WirePair<[['D', '6'], ['G', '14']]"; 
lines[lines_count++]="WirePair<[['A', '10'], ['F', '21']]";
lines[lines_count++]="WirePair<[['J', '11'], ['A', '16']]";
lines[lines_count++]="WirePair<[['J', '12'], ['A', '18']]";
lines[lines_count++]="WirePair<[['J', '13'], ['A', '19']]";
lines[lines_count++]="WirePair<[['D', '14'], ['E', '14']]";
lines[lines_count++]="WirePair<[['D', '15'], ['E', '15']]";
lines[lines_count++]="WirePair<[['D', '16'], ['E', '16']]";
lines[lines_count++]="WirePair<[['D', '17'], ['E', '17']]";
lines[lines_count++]="WirePair<[['D', '18'], ['E', '18']]";
lines[lines_count++]="WirePair<[['D', '19'], ['E', '19']]";
lines[lines_count++]="WirePair<[['D', '20'], ['E', '20']]";
lines[lines_count++]="WirePair<[['A', '17'], ['E', '30']]";
lines[lines_count++]="WirePair<[['D', '21'], ['E', '30']]";  
lines[lines_count++]="WirePair<[['A', '23'], ['D', '24']]";  
lines[lines_count++]="WirePair<[['A', '24'], ['E', '30']]";  
lines[lines_count++]="WirePair<[['A', '25'], ['D', '25']]";  
lines[lines_count++]="WirePair<[['A', '26'], ['D', '26']]";  
lines[lines_count++]="WirePair<[['F', '24'], ['J', '26']]";  
lines[lines_count++]="WirePair<[['F', '25'], ['J', '25']]";  
lines[lines_count++]="WirePair<[['F', '26'], ['J', '24']]";  
lines[lines_count++]="WirePair<[['F', '27'], ['J', '27']]";  
lines[lines_count++]="WirePair<[['A', '28'], ['D', '27']]";  
lines[lines_count++]="WirePair<[['A', '29'], ['E', '30']]";  
lines[lines_count++]="WirePair<[['J', '29'], ['I', '29']]";
lines[lines_count++]="WirePair<[['I', '30'], ['E', '30']]";  

//*************************************************************************
//**************************  Eagle Commands  *****************************
//*************************************************************************

string commands = "";
int xyz;
